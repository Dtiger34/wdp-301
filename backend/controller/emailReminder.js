const User = require('../model/user');
const XLSX = require('xlsx');
const jwtConfig = require('../config/jwtconfig');
const { sendReminderEmail } = require('../utils/nodemailer');
const BorrowRecord = require('../model/borrowHistory');

const handleReminderLogic = async () => {
    const now = new Date();
    const in48Hours = new Date(now.getTime() + 24 * 60 * 60 * 1000);

    console.log('üìå B·∫Øt ƒë·∫ßu ki·ªÉm tra nh·∫Øc nh·ªü m∆∞·ª£n s√°ch...');
    console.log('üïí Th·ªùi gian hi·ªán t·∫°i:', now.toISOString());
    console.log('‚è≥ M·ªëc nh·∫Øc nh·ªü tr∆∞·ªõc 24H:', in48Hours.toISOString());

    const query = {
        dueDate: { $lte: in48Hours, $gt: now },
        status: 'borrowed',
        hasReminderEmailSent: false,
    };

    console.log('üîç ƒêang t√¨m b·∫£n ghi m∆∞·ª£n s√°ch c√≥ ƒëi·ªÅu ki·ªán:');
    console.log(query);

    const records = await BorrowRecord.find(query)
        .populate('userId', 'email name')
        .populate('bookId', 'title');

    console.log(`üìÑ T√¨m th·∫•y ${records.length} b·∫£n ghi c·∫ßn g·ª≠i nh·∫Øc nh·ªü.`);

    let successCount = 0;

    for (const record of records) {
        const { userId, bookId, dueDate } = record;
        const userEmail = userId?.email;
        const userName = userId?.name;
        const bookTitle = bookId?.title;

        if (!userEmail || !userName || !bookTitle) {
            console.warn(`‚ö†Ô∏è Thi·∫øu th√¥ng tin trong b·∫£n ghi ${record._id}:`, {
                userEmail,
                userName,
                bookTitle,
            });
            continue;
        }

        try {
            await sendReminderEmail(userEmail, userName, bookTitle, dueDate);

            record.hasReminderEmailSent = true;
            await record.save();

            console.log(`‚úÖ ƒê√£ g·ª≠i email nh·∫Øc nh·ªü t·ªõi: ${userEmail}`);
            successCount++;
        } catch (err) {
            console.error(`‚ùå L·ªói g·ª≠i email t·ªõi ${userEmail}:`, err.message);
        }
    }

    console.log(`üéâ Ho√†n t·∫•t. T·ªïng s·ªë email g·ª≠i th√†nh c√¥ng: ${successCount}`);
    return { total: records.length, sent: successCount };
};

exports.checkAndSendReminders = async (req, res) => {
    try {
        await runReminderJob();
        res.status(200).json({ message: 'Reminder job executed.' });
    } catch (err) {
        console.error('‚ùå Error in reminder API:', err);
        res.status(500).json({ message: 'Server error', error: err.message });
    }
};

module.exports = { handleReminderLogic };