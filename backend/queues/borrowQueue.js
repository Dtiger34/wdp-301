const Queue = require('bull');

// T·∫°o h√†ng ƒë·ª£i x·ª≠ l√Ω y√™u c·∫ßu m∆∞·ª£n s√°ch
const borrowQueue = new Queue('borrow requests', {
	redis: {
		host: process.env.REDIS_HOST || 'localhost',  // ƒê·ªãa ch·ªâ Redis
		port: process.env.REDIS_PORT || 6379,         // C·ªïng Redis
		password: process.env.REDIS_PASSWORD || undefined, // M·∫≠t kh·∫©u (n·∫øu c√≥)
		db: process.env.REDIS_DB || 0,                // Ch·ªçn DB trong Redis (m·∫∑c ƒë·ªãnh l√† 0)
	},
});

// C·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho m·ªói job trong queue
const QUEUE_OPTIONS = {
	removeOnComplete: 10, // Xo√° job ho√†n th√†nh, gi·ªØ l·∫°i t·ªëi ƒëa 10 job g·∫ßn nh·∫•t
	removeOnFail: 10,     // Xo√° job th·∫•t b·∫°i, gi·ªØ l·∫°i t·ªëi ƒëa 10 job g·∫ßn nh·∫•t
	attempts: 3,          // Th·ª≠ l·∫°i t·ªëi ƒëa 3 l·∫ßn n·∫øu job b·ªã l·ªói
	backoff: {
		type: 'exponential', // Ki·ªÉu l√πi th·ªùi gian theo h√†m m≈© (2s, 4s, 8s,...)
		delay: 2000,         // Th·ªùi gian ch·ªù ban ƒë·∫ßu l√† 2 gi√¢y
	},
};

// Th√™m m·ªôt job x·ª≠ l√Ω y√™u c·∫ßu m∆∞·ª£n s√°ch v√†o h√†ng ƒë·ª£i
const addBorrowRequestJob = async (jobData) => {
	try {
		const job = await borrowQueue.add('processBorrowRequest', jobData, {
			...QUEUE_OPTIONS,
			delay: 0, // X·ª≠ l√Ω ngay l·∫≠p t·ª©c
		});

		console.log(`üìù ƒê√£ th√™m job y√™u c·∫ßu m∆∞·ª£n s√°ch ${job.id} v√†o h√†ng ƒë·ª£i`);
		return job;
	} catch (error) {
		console.error('‚ùå L·ªói khi th√™m job v√†o h√†ng ƒë·ª£i:', error);
		throw error;
	}
};

// L·∫•y tr·∫°ng th√°i c·ªßa m·ªôt job theo ID
const getJobStatus = async (jobId) => {
	try {
		const job = await borrowQueue.getJob(jobId);
		if (!job) {
			return { status: 'not_found' }; // Job kh√¥ng t·ªìn t·∫°i
		}

		const state = await job.getState(); // L·∫•y tr·∫°ng th√°i (waiting, active, completed, failed,...)
		return {
			status: state,              // Tr·∫°ng th√°i hi·ªán t·∫°i
			data: job.data,             // D·ªØ li·ªáu ban ƒë·∫ßu c·ªßa job
			result: job.returnvalue,    // K·∫øt qu·∫£ tr·∫£ v·ªÅ n·∫øu job th√†nh c√¥ng
			failedReason: job.failedReason, // L√Ω do th·∫•t b·∫°i (n·∫øu c√≥)
			progress: job.progress(),   // Ti·∫øn tr√¨nh th·ª±c hi·ªán (0‚Äì100%)
		};
	} catch (error) {
		console.error('‚ùå L·ªói khi l·∫•y tr·∫°ng th√°i job:', error);
		throw error;
	}
};

// B·∫Øt s·ª± ki·ªán khi job ho√†n th√†nh
borrowQueue.on('completed', (job, result) => {
	console.log(`‚úÖ Job ${job.id} ƒë√£ ho√†n th√†nh th√†nh c√¥ng`);
});

// B·∫Øt s·ª± ki·ªán khi job b·ªã l·ªói
borrowQueue.on('failed', (job, err) => {
	console.error(`‚ùå Job ${job.id} b·ªã l·ªói:`, err.message);
});

// B·∫Øt s·ª± ki·ªán khi job b·ªã "k·∫πt"
borrowQueue.on('stalled', (job) => {
	console.warn(`‚ö†Ô∏è  Job ${job.id} b·ªã treo (stalled)`);
});

// Xu·∫•t c√°c h√†m v√† bi·∫øn c·∫ßn thi·∫øt ra ngo√†i ƒë·ªÉ s·ª≠ d·ª•ng
module.exports = {
	borrowQueue,
	addBorrowRequestJob,
	getJobStatus,
	QUEUE_OPTIONS,
};
